# -*- coding: utf-8 -*-
"""Armand_BERT_Tuned.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OQQHDebfmhvdITuEFmY-N4nfU2kV2HST

# Installating the necessary packages
"""

!pip install transformers
!pip install tensorboardx
!pip install simpletransformers

# Commented out IPython magic to ensure Python compatibility.
# %%writefile setup.sh
# 
# git clone https://github.com/NVIDIA/apex
# pip install -v --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" ./apex

!sh setup.sh

"""# Importing the necessary libraries"""

# Commented out IPython magic to ensure Python compatibility.
try:
#   %tensorflow_version 2.x
  print("Tensorflow Version : " + (tf.__version__))
except Exception:
  print(Exception)
  pass
import tensorflow as tf
import tensorflow_hub as hub
import pandas as pd
from tensorflow.keras import layers
from google.colab import drive
drive.mount('/content/gdrive')

"""# Loading the DataFrame"""

# Load the dataset
# df = pd.read_csv("/content/gdrive/My Drive/Colab Notebooks/Sample_data.csv")
df = pd.DataFrame(pd.read_csv("/content/gdrive/My Drive/Colab Notebooks/labeled_data.csv"))

print(df.columns)

# Extract the tweet and type column
# df = df[["Tweet", "Type"]]
df = df[["tweet", "class"]]

# Convert the tweet column to lowercase
df['tweet'] = df['tweet'].str.lower()

print(df.head())
print(df.shape)

"""# Forming the Training and Testing Sets"""

from sklearn.model_selection import train_test_split

X = df["tweet"]
Y = df["class"]

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=42)

train_df = pd.DataFrame()
test_df = pd.DataFrame()

# Formation of the Training Dataframe
train_df["text"] = X_train
train_df["label"] = y_train
print(train_df.shape)

# Formation of the Testing Dataframe
test_df["text"] = X_test
test_df["label"] = y_test
print(test_df.shape)

"""# Roberta Model Initialization"""

from simpletransformers.classification import ClassificationModel

# Create a ClassificationModel
args = {'reprocess_input_data': True, 
      'overwrite_output_dir': True,
      'num_train_epochs': 5}
model = ClassificationModel('roberta', 'roberta-base', num_labels=3, args = args) # 3 output labels

"""# Training the Model"""

model.train_model(train_df)

"""# Evaluation on Test Data"""

from sklearn.metrics import f1_score, accuracy_score
from sklearn.metrics import confusion_matrix

def f1_multiclass(labels, preds):
    return f1_score(labels, preds, average='micro')

def confusion_matrix_cal(labels, pred):
    return confusion_matrix(labels, pred)

result, model_outputs, wrong_predictions = model.eval_model(test_df, f1=f1_multiclass, acc=accuracy_score, conf_matrix=confusion_matrix_cal)

print("---------- Results ----------")
print(result)

"""# BERT Model Initialization"""

from simpletransformers.classification import ClassificationModel

# Create a ClassificationModel
args = {'reprocess_input_data': True, 
      'overwrite_output_dir': True,
      'num_train_epochs': 5}
model = ClassificationModel('bert', 'bert-base-cased', num_labels=3, args = args) # 3 output labels

"""# Training the Model"""

model.train_model(train_df)

"""# Evaluation on Test Data"""

from sklearn.metrics import f1_score, accuracy_score
from sklearn.metrics import confusion_matrix

def f1_multiclass(labels, preds):
    return f1_score(labels, preds, average='micro')

def confusion_matrix_cal(labels, pred):
    return confusion_matrix(labels, pred)

result, model_outputs, wrong_predictions = model.eval_model(test_df, f1=f1_multiclass, acc=accuracy_score, conf_matrix=confusion_matrix_cal)

print("---------- Results ----------")
print(result)